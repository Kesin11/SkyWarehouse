name: CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Prepare
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Restore and export service account to ENV for GCS remote cache
      run: |
        echo $GCS_SERVICE_ACCOUNT | base64 --decode --ignore-garbage > service.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=service.json" >> $GITHUB_ENV
      if: env.GCS_SERVICE_ACCOUNT
      env:
        GCS_SERVICE_ACCOUNT: ${{ secrets.GCS_SERVICE_ACCOUNT }}

    # Execute
    - name: Build with Gradle
      run: ./gradlew build --profile
    
    # Post
    - uses: actions/upload-artifact@v2
      with:
        name: jars
        path: build/libs
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        name: reports
        path: |
          build/test-results/test/*.xml
          build/reports/
      if: always()

  integrate_test:
    runs-on: ubuntu-latest
    needs: build
    env:
      GOOGLE_APPLICATION_CREDENTIALS: service.json
    steps:
      # Prepare
      - name: Decrypt service account json
        env:
          GCS_SERVICE_ACCOUNT: ${{ secrets.GCS_SERVICE_ACCOUNT }}
        run: echo $GCS_SERVICE_ACCOUNT | base64 --decode --ignore-garbage > service.json
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/download-artifact@v2
        with:
          name: jars
      
      # Integrate test
      - run: |
          mkdir -p github_actions/nest
          echo ${{ github.sha }} > github_actions/${{ github.run_number }}.txt
          echo ${{ github.sha }} > github_actions/nest/${{ github.run_number }}.txt
      - name: Upload wildcard paths
        run: |
          java -jar skw.jar upload \
            -b "kesin11_bazel_cache" \
            -k "github_actions" \
            -t "${{ github.sha }}" -t "latest" \
            ./github_actions/*.txt
      - name: Upload glob paths
        run: |
          java -jar skw.jar upload \
            -b "kesin11_bazel_cache" \
            -k "github_actions" \
            -t "${{ github.sha }}" -t "latest" \
            ./github_actions/**/*.txt
      - name: list keys
        run: |
          java -jar skw.jar keys \
            -b "kesin11_bazel_cache"
      - name: list tags
        run: |
          java -jar skw.jar tags \
            -b "kesin11_bazel_cache" \
            "github_actions"
      - name: Download
        run: |
          java -jar skw.jar download \
            -b "kesin11_bazel_cache" \
            -k "github_actions" \
            -t "${{ github.sha }}" \
            ./down
      - name: list got files
        run: ls down/**

  dogfooding:
    runs-on: ubuntu-latest
    needs: build
    env:
      GOOGLE_APPLICATION_CREDENTIALS: service.json
    steps:
      # Prepare
      - name: Decrypt service account json
        env:
          GCS_SERVICE_ACCOUNT: ${{ secrets.GCS_SERVICE_ACCOUNT }}
        run: echo $GCS_SERVICE_ACCOUNT | base64 --decode --ignore-garbage > service.json
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/download-artifact@v2
        with:
          name: jars

      # Execute
      - name: Upload own jar to GCS
        run: |
          java -jar skw.jar upload \
            -b "kesin11_bazel_cache" \
            -k "dogfooding" \
            -t "${{ github.sha }}" -t "latest" \
            -p "dogfooding/${{ github.run_number }}" \
            ./skw.jar
